Name,Description,Size,Script: On Execute,Gadget,Slots,NEED TOTAL?,Category,Colour,Upgrade,Weaken,Alternate Status Trigger,SFX,Uses?,Cast Backwards?,Single use?,Parallel Universe,Special?,Error Immune,Show Gold,Appears For Parts,Hide Reuseable,Witch Spell,Script: Before Combat,Script: After Combat,Script: Before Start Turn,Script: On Start Turn,Script: On any equipment use,Script: End Turn,Script: Before execute,Script: On Snap,Script: On Fury
More Dice!,Roll a dice!|Lose [heart]<d6> health,2,//$ var value = rand([1|2|3|4|5|6]); givedice(value); pierceattackself(value);  e.resetskillsfornewturn();$,,,,BACKUP,GRAY,,,,NONE,-1,YES,NO,NO,YES,NO,NO,NO,NO,,,,,,,,,,
Blood Battery,Your next equipment is reusable[;]|lose [heart]<var:hurtself> health,2,inflictself(REEQUIPNEXT); pierceattackself(self.getvar(~hurtself~)); self.setvar(~hurtself~|self.getvar(~hurtself~) * 2);,,NORMAL,,NORMAL,GRAY,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,self.setvar(~hurtself~|1);,,,,,,,,
Loyal Protector,Convert all but 1|of your health to shield,1,inflictself(SHIELD|self.hp - 1); pierceattackself(self.hp - 1); sfx(~_shield~);,,NORMAL,,SHIELD,ORANGE,change_power,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Loyal Protector_upgraded,Convert all but 1|of your health to|twice as much shield,1,inflictself(SHIELD|2 * (self.hp - 1)); pierceattackself(self.hp - 1); sfx(~_shield~);,,NORMAL,,SHIELD,ORANGE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Shield Smash,Spend [shield]<d6> shield[;]|do [sword]<double> damage,2,if (getstatusself(SHIELD) <= d) { attack(getstatusself(SHIELD) * 2); attackself(getstatusself(SHIELD)); } else { attack(d * 2); attackself(d); },,MAX3,,WEAPON,ORANGE,simplify,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Infinite Hall,Roll infinite dice!|-1 dice this fight,1,inflictself(~infinite~); self.extradice--;,Focus,REQUIRE6,,MAGIC,PURPLE,simplify,double_requirements,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Unmarked Dice,Gain +1 dice this fight[;]|but it's always blinded,1,self.extradice++; inflictself(~blinddice~|1);,,EVEN,,MAGIC,PURPLE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~blinddice~) > 0) { inflictself(BLIND|getstatusself(~blinddice~)); },,,,,,
Heavily Loaded Dice,You only roll <d6>[;]|-1 dice this fight,1,self.extradice--; if (getstatusself(~heavyloaded_~ + self.getvar(~load~)) > 0) { removestatusself(~heavilyloaded_~ + self.getvar(~load~)); } inflictself(~heavyloaded_~ + d); self.setvar(~load~|d);,,NORMAL,,MAGIC,PURPLE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,self.setvar(~load~|1);,,,if (getstatusself(~heavyloaded_~ + self.getvar(~load~)) > 0) { for (mydice in self.dicepool){ if (mydice.available()) { if (mydice.basevalue != self.getvar(~load~)) { mydice.animatereroll(self.getvar(~load~)); } } } },,,,,
Band Saw,Split a dice[;]|the dice stays split,1,givedice(split(d)| ~splitdice~); inflictself(~split~|1);,,NORMAL,,ITEM,GREEN,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,if (getstatusself(~split~) > 0) { var split = getstatusself(~split~); for (mydice in self.dicepool){ if (mydice.available()) { if (split > 0) { givedice(split(mydice.basevalue)| ~splitdice~); split--; } } } },,,,,
Bump Two Much,Take [heart]2 damage[;]|bump dice[;] twice,1,var dicelist = []; pierceattackself(2); if(d >= 6) { givedice([6| 1]);  } else { givedice(d + 1); } for (mydice in self.dicepool) { if (mydice.available()) { trace(mydice); trace(mydice.basevalue); dicelist.push(mydice); } } trace(dicelist[dicelist.length]); trace(dicelist[dicelist.length].basevalue); trace(dicelist[dicelist.length-1]); trace(dicelist[dicelist.length-1].basevalue); if (dicelist[dicelist.length - 1].basevalue >= 6) { givedice(1); } else { dicelist[dicelist.length - 1].animatereroll(dicelist[dicelist.length - 1] + 1); },,NORMAL,,ITEM,GREEN,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Caught Cheating,Roll 6 <d6>[;] you can|no longer roll <d6> for the rest of the fight,1,givedice([d|d|d|d|d|d]); inflictself(~dicelock_~ + d);,,NORMAL,,MAGIC,PURPLE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,var i = 1; var acceptable = []; var banned = []; var banall = false; for (i in 1...7) { if (getstatusself(~dicelock_~ + i) > 0) { banned.push(i); } else { acceptable.push(i); } } if (acceptable.length < 1) { banall = true; } i = 1; for (mydice in self.dicepool){ if (mydice.available()) { for (i in banned) { if (mydice.basevalue == i) { if (banall == true) { mydice.removedice(self.screenposition()); } else { mydice.animatereroll(rand(acceptable)); } } } i = 1; } },,,,,
Dice Loan,Roll 3 dice|Next turn[;] lock [lock]2,1,givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); inflictself(~block~|2);,,MAX4,,MAGIC,PURPLE,simplify,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~block~) > 0) {inflictself(LOCK|getstatusself(~block~)); removestatusself(~block~|ALL);} sfx(~_lock~);,,,,,,
Dice Loan_upgraded,Roll <d6>+1 dice|Next turn[;] lock [lock]<d6>,1,var i = 0; for (i in 0...d+1) { givedice(rand([1|2|3|4|5|6])); if (i > 0) { inflictself(~block~|d); } },,NORMAL,,MAGIC,PURPLE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~block~) > 0) {inflictself(LOCK|getstatusself(~block~)); removestatusself(~block~|ALL);} sfx(~_lock~);,,,,,,
Blood Crucible,Siphon [heart]3 health to the|enemy[;] roll 2 dice,1,pierceattackself(3); attack(-3); givedice([rand([1|2|3|4|5|6|])|rand([1|2|3|4|5|6])]);,,MAX3,,WEAPON,RED,change_power,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Blood Crucible_upgraded,Siphon [heart]<d6> health to the|enemy[;] roll 2 dice,1,pierceattackself(d); attack(-d); givedice([rand([1|2|3|4|5|6|])|rand([1|2|3|4|5|6])]);,,MAX3,,WEAPON,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Dice Drain,Roll 2 dice[;]|Next turn[;] freeze [ice]2 dice,1,givedice([rand([1|2|3|4|5])|rand([1|2|3|4|5])]); inflictself(~permafrost~|2);,,MIN2,,MAGIC,BRIGHTCYAN,simplify,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~permafrost~) > 0) {inflictself(ICE|getstatusself(~permafrost~)); removestatusself(~permafrost~|ALL);},,,,,,
Bloodier Cauldron,Lose [heart]<double> health[;]|roll 2 dice,1,pierceattackself(d*2); givedice([rand([1|2|3|4|5|6|])|rand([1|2|3|4|5|6])]);,,MAX3,,MAGIC,RED,change_power,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Bloodier Cauldron_upgraded,Lose [heart]<double> health[;]|roll <d6> dice,1,var i = 0; pierceattackself(d*2); for (i in 0...d) { givedice(rand([1|2|3|4|5|6])); },,NORMAL,,MAGIC,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Dice Theft,Steal 3 dice from|the enemy,2,if (target.dice + target.extradice < 3) { var i = 0; for (i in 0...target.dice+target.extradice) { givedice(); target.extradice--; inflict(~stolen~|1); } } else { givedice([rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])|rand([1|2|3|4|5|6])]); target.extradice-=3; inflict(~stolen~|3); },,NORMAL|NORMAL|NORMAL,6,ITEM,GREEN,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatus(~stolen~) > 0) { target.extradice += getstatus(~stolen~); removestatus(~stolen~|ALL); },,,,,,
Really Heavy Sword,Do <double> damage[;]|throw out a dice,2,attack(d*2); sfxdamage(target|d*2); var remove = []; for (mydice in self.dicepool) { if (mydice.available()) { remove.push(mydice); } } if(remove.length < 1) { inflictself(~dicecard~); } else { shuffle(remove); remove[0].removedice(self.screenposition()); },,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,if (getstatusself(~dicecard~) > 0) { var i = 0; for (i in 0...getstatusself(~dicecard~)) { var remove = []; for (mydice in self.dicepool) { if (mydice.available()) { remove.push(mydice); } } shuffle(remove); remove[0].removedice(self.screenposition()); } } removestatusself(~dicecard~|ALL),,,,,
Borrowed Time,Restore [heal]all health|Take [poison]15 poison,1,attackself(-self.maxhp); sfx(~_heal~); inflictself(POISON|15); sfx(~_poison~);,,NORMAL,,MAGIC,GREEN,change_power,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Borrowed Time_upgraded,Restore [heal]all health|Take [poison]10 poison,1,attackself(-self.maxhp); sfx(~_heal~); inflictself(POISON|10); sfx(~_poison~);,,NORMAL,,MAGIC,GREEN,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Pain Split,Split both of your health|between the two of you,1,var total = ((self.hp + target.hp) / 2); pierceattackself(self.hp - total); pierceattack(target.hp - total); sfx(~_heal~); sfx(~_poison~);,,NORMAL,,MAGIC,GREEN,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Eternal Life,Increase max hp by 4[;] finish|the fight in two turns or die|(Disappears in <var:turns> turns!),2,self.maxhp += 4; inflictself(~deathsoon~|2);,,NORMAL,,MAGIC,GREEN,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,self.setvar(~turns~|1);,,if (self.getvar(~turns~) == 0) { e.availablethisturn = 0; },,,if (self.getvar(~turns~) > 0) { self.setvar(~turns~|self.getvar(~turns~) - 1); } if (getstatusself(~deathsoon~) > 0) { removestatusself(~deathsoon~|1); } else { pierceattackself(999); },,,e.preventdefault = true; e.maintainfury = true;
Vampirism,Your next attack drains health|instead of dealing damage,1,,,ODD,,MAGIC,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Emergency Vampire Blood,If you're in critical health[;]|become a vampire for 1 turn,1,if (self.hp / self.maxhp < .25 # self.hp <= 6) { inflictself(VAMPIRE); },,NORMAL,,MAGIC,GREEN,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(VAMPIRE) > 1) { removestatusself(VAMPIRE|ALL); },,,,,,
From the Brink,Heal to [heal]full[;] only|works at critical health|[gray](Breaks after use),2,if(self.hp / self.maxhp < .25 # self.hp <= 6) { attackself(-self.maxhp); removeequipment(e.name); },,NORMAL,,MAGIC,GREEN,,,,NONE,0,YES,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,
God's Gift,Restore health equal to half the|damage you dealt to yourself last turn,1,,,,,MAGIC,GREEN,,,,,,,,,,,,,,,,,,,,,,,
Vengeful Strike,Do [sword]<var:hurt> damage|(Equal to health lost),2,attack(self.maxhp - self.hp);,,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,self.setvar(~hurt~|self.maxhp - self.hp),,self.setvar(~hurt~|self.maxhp - self.hp),,,,
Only in Death,Do [sword]3 damage[;] if it would|kill[;] instead restore [heal]6 health|(Even: To you[;] [gray]Odd: To enemy),2,if (d % 2 == 0) {if (self.hp + getstatusself(SHIELD) <= 3) { attackself(-6); } else { attackself(3); }} else {if (target.hp + getstatus(SHIELD) <= 3) { attack(-6); } else { attack(3); }},,NORMAL,,WEAPON,RED,change_power,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Only in Death_upgraded,Do [sword]<d6> damage[;] if it would|kill[;] instead restore [heal]<double> health|(Even: To you[;] [gray]Odd: To enemy),2,if (d % 2 == 0) {if (self.hp + getstatusself(SHIELD) <= 3) { attackself(-6); } else { attackself(3); }} else {if (target.hp + getstatus(SHIELD) <= 3) { attack(-6); } else { attack(3); }},,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Payback,Do [sword]<var:damagetaken> damage|(Equal to damage|[gray]taken this turn),2,attack(self.getvar(~damagetaken~));,,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,self.setvar(~previoushp~|self.hp);,,self.setvar(~previoushp~|self.hp);  self.setvar(~damagetaken~|self.getvar(~previoushp~)-self.hp); if (self.hp < self.getvar(~previoushp~)) {self.setvar(~damagetaken~|self.getvar(~damagetaken~) + self.getvar(~previoushp~) - self.hp);} self.setvar(~previoushp~|self.hp);,if (self.hp < self.getvar(~previoushp~)) {self.setvar(~damagetaken~|self.getvar(~damagetaken~) + self.getvar(~previoushp~) - self.hp);} self.setvar(~previoushp~|self.hp);,if (self.hp < self.getvar(~previoushp~)) {self.setvar(~damagetaken~|self.getvar(~damagetaken~) + self.getvar(~previoushp~) - self.hp);} self.setvar(~previoushp~|self.hp);,,,,
Bloody Blade,Do [sword]2x<var:hitself> damage|(For each time you hurt yourself),1,attack(self.getvar(~hitself~)*2);,,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,self.setvar(~hitself~|0); self.setvar(~previoushp~|self.hp);,,,self.setvar(~previoushp~|self.hp); if (self.hp < self.getvar(~previoushp~)) {self.setvar(~hitself~|self.getvar(~hitself~) + 1); } self.setvar(~previoushp~|self.hp);,if (self.hp < self.getvar(~previoushp~)) {self.setvar(~hitself~|self.getvar(~hitself~) + 1); } self.setvar(~previoushp~|self.hp);,,,,
Sacrificial Dagger@1,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@2~|true|false|e); attack(d); } else { attack(d); },,MAX3,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@2,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@3~|true|false|e); attack(d+1); } else { attack(d+1); },,MAX3|FREE1,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@3,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@4~|true|false|e); attack(d+2); } else { attack(d+2); },,MAX3|FREE2,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@4,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@5~|true|false|e); attack(d+3); } else { attack(d+3); },,MAX3|FREE3,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@5,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@6~|true|false|e); attack(d+4); } else { attack(d+4); },,MAX3|FREE4,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@6,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@7~|true|false|e); attack(d+5); } else { attack(d+5); },,MAX3|FREE5,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@7,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@8~|true|false|e); attack(d+6); } else { attack(d+6); },,MAX3|FREE6,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@8,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@9~|true|false|e); attack(d+7); } else { attack(d+7); },,MAX3|FREE6|FREE1,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@9,Do [sword]<d6> damage[;]|+[sword]1 for each killing blow,1,if (target.hp <= d) { giveequipment(~Sacrificial Dagger@10~|true|false|e); attack(d+8); } else { attack(d+8); },,MAX3|FREE6|FREE2,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,e.preventdefault = true; e.maintainfury = true;
Sacrificial Dagger@10,Do [sword]<d6> damage[;],1,attack(d+9);,,MAX3|FREE6|FREE3,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Invert,Do [sword]<d6> damage|to enemy and yourself[;]|restore [heal]3 health,2,attack(d); attackself(d); attackself(-3);,,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Red Ring of Death,Get permanent fury|(Take <var:charging> more damage to use!),1,if (e.charge >= ((self.maxhp - (self.maxhp%2)) /2)) { inflictself(~permafury~); inflictself(FURY); },,REQUIRE1,,MAGIC,RED,,,,NONE,0,YES,YES,NO,NO,NO,NO,NO,NO,,,,self.setvar(~charging~|(self.maxhp - (self.maxhp%2)) /2);,,self.setvar(~charging~|self.getvar(~charging~) - e.charge); if (self.getvar(~charging~) < 0) { self.setvar(~charging~|0); } trace(getstatusself(~permafury~)); if (getstatusself(~permafury~) > 0) { trace(~in here~); inflictself(FURY); },,,,e.preventdefault = true; e.maintainfury = true;
Schadenfreude,Do <d6> damage[;]|restore health equal to the difference,2,attack(d); sfxdamage(target|d); var healing = -(actualdice[0].basevalue - actualdice[1].basevalue); if( healing != 0) { attackself(healing); sfx(~_heal~); },,MAX4|MAX4,,WEAPON,RED,simplify,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Cracked Countdown,Do [sword]<var:damagedeal> damage in <var:remaining> turns[;]|a dice gets it sooner[;] lose <d6> damage|[gray](Reusable),1,self.setvar(~damagedeal~|self.getvar(~damagedeal~) - d); self.setvar(~remaining~|self.getvar(~remaining~) - 1); if (self.getvar(~remaining~) < 1) { attack(self.getvar(~damagedeal~)); sfxdamage(target|self.getvar(~damagedeal~)); self.setvar(~damagedeal~|20); self.setvar(~remaining~|5); },,NORMAL,,MAGIC,RED,,,,NONE,-1,YES,NO,NO,NO,NO,NO,NO,NO,,self.setvar(~remaining~|5); self.setvar(~damagedeal~|20);,,,if (turn > 1) { self.setvar(~remaining~|self.getvar(~remaining~) - 1); } if (self.getvar(~remaining~) < 1) { attack(self.getvar(~damagedeal~)); sfxdamage(target|self.getvar(~damagedeal~)); self.setvar(~damagedeal~|20); self.setvar(~remaining~|5); },,,,,
Assassinate,Do [sword]<d6> damage for every|[heart]10 health the enemy has lost|[gray](Once per battle),2,var count = ((target.maxhp - target.hp) - ((target.maxhp - target.hp) % 10))/10; for (i in 0...count) { attack(d); sfxdamage(target|d); },,NORMAL,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Assassinate_upgraded,Do [sword]<d6> damage for every|[heart]5 health the enemy has lost|[gray](Once per battle),2,var count = ((target.maxhp - target.hp) - ((target.maxhp - target.hp) % 5))/5; for (i in 0...count) { attack(d); sfxdamage(target|d); },,DOUBLES|DOUBLES,,WEAPON,RED,,,,NONE,0,NO,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,
No! Wait! Stop!,Do [sword]1 damage <d6> times…|to YOURSELF!!!,1,var i = 0; for (i in 0...d) { pierceattackself(1); if (self.getvar(~hitself~) >= 0 && i > 0) { trace(~hitself~); self.setvar(~hitself~|self.getvar(~hitself~) + 1); } },,MAX3,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Siphoning Battle Axe,Do [sword]<triple> damage[;]|siphon [heart]<d6> of it back,2,attack(d*3); pierceattackself(d); attack(-d);,Scream,MAX4,,WEAPON,YELLOW,reducesize,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Chilled Blade,Do [sword]<d6> damage|Next turn[;] freeze [ice]1,1,attack(d+1); inflictself(~permafrost~|1); sfx(~_ice~),,REQUIRE1|FREE1,,WEAPON,BRIGHTCYAN,change_power,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~permafrost~) > 0) {inflictself(ICE|getstatusself(~permafrost~)); removestatusself(~permafrost~|ALL);},,,,,,
Chilled Blade_upgraded,Do [sword]<d6> damage|Next turn[;] freeze [ice]1,1,attack(d+1); inflictself(~permafrost~|1); sfx(~_ice);,,REQUIRE1|FREE2,,WEAPON,BRIGHTCYAN,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~permafrost~) > 0) {inflictself(ICE|getstatusself(~permafrost~)); removestatusself(~permafrost~|ALL);},,,,,,
Iceberg,Freeze [ice]ALL dice|(Including yours next turn),2,inflict(ICE|ALL); inflictself(~permafrost~|self.dice + self.extradice);,,DOUBLES|DOUBLES,,MAGIC,BRIGHTCYAN,,,,_ice,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatusself(~permafrost~) > 0) {inflictself(ICE|getstatusself(~permafrost~)); removestatusself(~permafrost~|ALL);},,,,,,
Forbidden Knowledge,Inflict [poison]2 poison to yourself[;]|deal damage equal to ALL poison,1,inflictself(POISON|2); attack(getstatusself(POISON) + getstatus(POISON)); sfxdamage(target|getstatusself(POISON) + getstatus(POISON));,,NORMAL,,MAGIC,PURPLE,,,,_poison,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
A Gift...,Gift the enemy|your next poison damage,1,self.setvar(~poisongive~|1);,,ODD,,MAGIC,PURPLE,,,,_poison,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,if (self.getvar(~poisongive~) == 1) { attackself(-getstatusself(POISON)); attack(getstatusself(POISON)); sfx(~_applypoison~); } self.setvar(~poisongive~|0);,,,,,,
Gambit,Insert a <d6>[;]|if you roll it next turn[;]|do [sword]<triple> damage,1,inflictself(~gambit_~+d|1);,,NORMAL,,WEAPON,RED,,,,diceroll,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,var i = 0; for (i in 1...7) { for (mydice in self.dicepool) { trace(i); trace(getstatusself(~gambit_~+i)); if (mydice.available()) { trace(mydice.basevalue); if (mydice.basevalue == i) { if (getstatusself(~gambit_~+i) > 0) { target.textparticle(~It's a hit!~); attack(i * 3); sfxdamage(target|i * 3); removestatusself(~gambit_~+i|1); } } } } removestatusself(~gambit_~+i|ALL); },,,,,
Spatulambit,Insert a <d6>[;]|if you roll it flipped next|turn[;]do [sword]<triple> damage,1,var spatula = 7 - d; inflictself(~spatulambit_~+spatula|1); self.setvar(~spatulambit~|1);,,NORMAL,,WEAPON,RED,change_power,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,var i = 0; for (mydice in self.dicepool) { if (mydice.available()) { for (i in 1...7) { if (mydice.basevalue == getstatusself(~spatulambit_~+i)) { target.textparticle(~It's a hit!~); attack((7 - i) * 3); sfxdamage(target|(7 - i) * 3); removestatusself(~spatulambit_~+i|1); break; } } i = 0; } } self.setvar(~spatulambit~|0);,,if (self.getvar(~spatulambit~) < 1) { var i = 0; for (i in 1...7) { removestatusself(~spatulambit_~+i|ALL); } },,,
Spatulambit_upgraded,Flip a <d6> and then insert it[;]|if you roll it next turn[;]|do [sword]<triple> damage,1,inflictself(~gambit_~+(7-d)|1); self.setvar(~gambit~|1);,,NORMAL,,WEAPON,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,var i = 0; for (mydice in self.dicepool) { if (mydice.available()) { for (i in 1...7) { if (mydice.basevalue == getstatusself(~gambit_~+i)) { target.textparticle(~It's a hit!~); attack(i * 3); sfxdamage(target|i * 3); removestatusself(~gambit_~+i|1); break; } } i = 0; } } self.setvar(gambit|0);,,if (self.getvar(~gambit~) < 1) { var i = 0; for (i in 1...7) { removestatusself(~gambit_~+i|ALL); } },,,
Rod of Roasting,Cast Meteor repeatedly[;]|with random targets,2,while (self.hp > 0 && target.hp > 0) { if ( rand([1|2]) % 2 == 0 ) { trace(~Attacking me~); attackself(20| FIRE); inflictself(FIRE| ALL); sfxdamage(self|20); } else { trace(~Attacking enemy~); attack(20| FIRE); inflict(FIRE| ALL); sfxdamage(target|20); } },Hellfire,NORMAL|NORMAL|NORMAL|NORMAL,20,WEAPON,RED,simplify,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Throw Leftover Dice,Throw all your dice at the enemy[;]|do damage equal to half their value,1,var c = 0; for (mydice in self.dicepool) { if (mydice.available()) { var throw = ((mydice.basevalue - (mydice.basevalue % 2))/2); attack(throw); sfxdamage(target|throw); mydice.throwdice(self.screenposition()|c); c+=0.05; } },,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Luck of the Draw,Use 5 random equipments,2,,,DOUBLES|DOUBLES,,MAGIC,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Hired Help,Costs [gold]1 gold to do <triple> damage|[(Only does <d6> if you can't pay),2,if (self.gold > 0) { self.gold--; attack(d*3); }; else { attack(d); },,MAX4,,WEAPON,YELLOW,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Swung Too Hard,Do <triple> damage[;]|but disable 1 of your|equipment next turn,2,attack(d*3); inflictself(~smashed~|1);,,MAX4,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,if (getstatusself(~smashed~) > 0) { for (i in 0...getstatusself(~smashed~)) { var equip = rand(self.equipment); while (equip.ready == 0) { trace(equip.name); equip = rand(self.equipment); } trace(equip.name); equip.animate(~error~); sfx(~roboterror~); } removestatusself(~smashed~|ALL); },,,,,
Level Slash,Do [sword]2x your|level damage,1,attack(self.level*2);,,REQUIRE1,,WEAPON,RED,change_power,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,e.changeslots([~REQUIRE~ + self.level]);,,,,,,,,
Level Slash_upgraded,Do [sword]2x your|level damage,1,attack(self.level*2);,,ODD,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,if (self.level % 2 == 0) { e.changeslots([~EVEN~]); } else { e.changeslots([~ODD~]); },,,,,,,,
Stab Aggressively,Do [sword]1 damage <d6> times,1,attack(1); sfxdamage(target|1);,,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,inflictself(FURY|d-1);,,
A Metaphor for Racism,Do [sword]<d6> damage[;]|[sword]<triple> damage if the enemy is a fish,2,trace(target.name); if (target.name == ~Baby Squid~ # target.name == ~Kraken~) { attack(3*d); } else { attack(d); },,MAX5,,WEAPON,RED,,,,,,,,,,,,,,,,,,,,,,,
Hacked!,Lock [lock]2 dice[;]|shock [shock]2 equipment,2,inflict(LOCK|2); inflict(SHOCK|2);,,COUNTDOWN,20,ITEM,YELLOW,threequartercountdown,,,,,,,,,,,,,,,,,,,,,,
Reuseable Sword,Do <d6> damage[;]|shuffle this back|into your deck,2,,,MAX4,,,,,,,,,,,,,,,,,,,,,,,,,,
Borrowed Sword,Take control of an|enemy equipment[;]|shuffle it into your deck,2,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
Righteous Vengeance,You do [sword]1 extra damage|for the rest of the fight|[gray](Once per fight),2,inflictself(~extradamage~);,,REQUIRE2|REQUIRE2|REQUIRE3|REQUIRE3,,MAGIC,RED,simplify,,,NONE,0,YES,YES,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Temporal Shift,The enemy takes an|extra turn[;] then you do,1,inflict(~bonus~); inflictself(~bonus~); //inflict lose a turn on myself to give opponent extra turn,,NORMAL,,MAGIC,PURPLE,change_power,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatus(~bonus~) > 0) { self.endturnnow(); removestatus(~bonus~|ALL); continue; } if (getstatusself(~bonus~) > 0) {inflictself(EXTRATURN|getstatusself(~bonus~)); removestatusself(~bonus~|ALL); e.availablethisturn = 0; } else { e.availablethisturn = 1; },,,,,,
Temporal Shift_upgraded,All turns are doubled[;]|except for your first,1,,,,,MAGIC,PURPLE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,if (getstatus(~bonus~) > 0) { self.endturnnow(); removestatus(~bonus~|ALL); continue; } if (getstatusself(~bonus~) > 0) {inflictself(EXTRATURN|getstatusself(~bonus~)); removestatusself(~bonus~|ALL); },,,if (getstatusself(~bonus~) < 1 # getstatusself(EXTRATURN) < 1) { inflictself(~bonus~); inflict(~bonus~); },,,
Blood Pact,Damage dealt to you is also|dealt to the enemy,1,self.setvar(~previoushp~|self.hp); trace(~previoushp~); inflictself(~bloodpact~); giveequipment(~Necessary Inelegance~| true| false| e);,,DOUBLES|DOUBLES,,MAGIC,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Necessary Inelegance,I didn't hope for this|to be so messy,1,giveequipment(~Blood Pact~| true| false| e);,,,,MAGIC,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,e.doequipmentaction(self|target|e.castdirection|e.assigneddice|0);,trace(self.getvar(~previoushp~)); if (self.hp < self.getvar(~previoushp~)) { trace(~in here~); attack(self.getvar(~previoushp~) - self.hp); } self.setvar(~previoushp~|self.hp);,,,,
Blood to Dice,Your equipment costs|[heart]health instead of dice.,1,,,,,MAGIC,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Atest,Requires short straight.,2,var i = 1; for (i in 1...4) { trace(actualdice[0].basevalue); trace(actualdice[1].basevalue); trace(actualdice[2].basevalue); trace(actualdice[3].basevalue); },,MAX3|RANGE24|RANGE35|MIN4,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Split Missile,Deal [sword]<double> damage|split randomly,1,var i = 0; for (i in 0...(d*2)) { var flip = rand([0|1]); trace(flip); trace(i);if (flip > 0) { attack(1); sfxdamage(target|1); } else { attackself(1); sfxdamage(self|1); } },,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Russian Roulette,Roll a dice[;]|deal <double> the roll as damage|if it's a 6[;] you take the damage,2,var dice = rand([1|2|3|4|5|6]); givedice(dice); if (dice == 6) { attackself(dice*2); } else { attack(dice*2); },,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Iron Sword,Deal [sword]<double> damage[;]|lose [heart]<d6> health[;]|add [shield]<double> shield,2,attack(2*d); pierceattackself(d); inflictself(SHIELD|d*2);,,MAX4,,WEAPON,ORANGE,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Dice Mail Armor,Convert the rest of|your dice to shield,1,for (mydice in self.dicepool) { if (mydice.available()) { inflictself(SHIELD|mydice.basevalue); sfx(~_shield~); mydice.removedice(self.screenposition()); } },,NORMAL,,ITEM,ORANGE,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Behead@Normal,Split a dice (and this equipment)|in two[;] deal the pieces as damage,2,var splitd = split(d); trace(splitd); givedice(splitd|~splitdice~); attack(splitd[0]); attack(splitd[1]); giveequipment([~Behead@Head~|~Behead@Body~]| true| false); removeequipment(e.name);,,NORMAL,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Behead@Head,Split a dice in two|(Play both Beheads to combine them!),1,givedice(split(d)|~splitdice~); ,,MIN4,,ITEM,RED,,,,NONE,0,YES,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Behead@Body,Do [sword]<d6> damage|(Play both Beheads to combine them!),1,attack(d);,,MAX3|MAX3,,WEAPON,RED,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Ebb and Flow,Do [sword]<d6> damage on odd turns|Restore [heal]<d6> health on even turns,1,if (turn % 2 == 0) { attackself(-d); } else { attack(d); },,NORMAL,,WEAPON,GREEN,,,,NONE,0,NO,NO,NO,NO,NO,NO,NO,NO,,,,,,,,,,
Unloaded Bow,End of turn: Do [sword]<var:loaded> damage|On use: Double damage[;]resets each turn|[gray](Reusable),2,self.setvar(~loaded~|self.getvar(~loaded~) * 2); trace(self.getvar(~loaded~));,,MAX3,,WEAPON,RED,,,,NONE,-1,YES,NO,NO,NO,NO,NO,NO,NO,,,,self.setvar(~loaded~|1); trace(self.getvar(~loaded~));,,,attack(self.getvar(~loaded~));,,,